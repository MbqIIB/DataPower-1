<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Copyright 2014, 2015 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/
 -->
<!--
  This stylesheet performs DataPower deployment operations:

  clean - delete any temp files created by this ant script
  
  import-changed - import a specified .zip or .xcfg file into the domain, making changes along the way
  import-from-def - ditto
  import-dpo - import a specified .zip or .xcfg file into the domain, making changes along the way
  
  This script relies on the following ANT properties:
  
    host - the hostname or IP address of the DataPower device
    domain - the name of the domain on that device
    uid - the userid on that device
    pwd - the password for the userid on that device
    port - the XML Management Interface port on that device (optional, defaults to 5550)
  
    dcm.jar - location of DCM jar file
    work.dir - location of DCM temp directory
    dcm.dir - location of DCM stylesheets directory
    schema.dir - location of directory used by DCM to cache internally-generated schemas 
    
  IF YOU ARE NEW TO ANT:
  
    Ant executes the specified "targets" in the order that you specified them on the command line, or
    it executes the "main" target, which is the default.  Each target may depend on other targets, and those
    will be executed first.  For example, the "main" target depends on "domain-create", which in turn depends on
    "check-access".  So Ant will begin by executing the "check-access" target, then the "domain-create"
    target, and finally the "main" target.  Oh, and the code preceding all the <target> elements is initialization
    code and will be executed before everything else.  Targets that are defined but not needed are ignored.
    
    Properties are the lifeblood of Ant.  A property is simply a name/value pair and it can be set once.  Further
    changes to a property are ignored.  For example, if the property xyz is defined on the command line like this:
      ant -Dxyz=10
      
    then xyz will have that value for the life of the Ant execution, regardless of how many times you attempt to
    set xyz after that.  Several places in the script provide default values for some properties but it isn't
    possible (or generally desirable) to prevent the user from setting a property either on the command line,
    or through a property file named on the command line.
    
    Properties, once defined, exist for the rest of Ant's execution.  With one exception of course. ;)
    The lifetime of Ant properties can be confined by writing code this way:
    
      <sequential>
        <local name="def"/>
        <property name="def" value="123"/>
        ...
      </sequential>
    
    The property "def" will be forgotten at the end of the <sequential> task.
    
    There you go.  With these concepts in hand, Ant scripts are generally straightforward to read.
    
-->
<project name="deploy" default="main" xmlns:props="antlib:ibm">

  <description>Implement various DataPower deployment operations.</description>
  
  <!--<property file="deploy.ant.properties"></property>-->
  
  <property name="dcm.build.version" value="1"/>
  <property name="dcm.dir" value="D:\ANT\datapower-configuration-manager-master\dcm"/>
   <property name="service.name" value="sample_mpg"/>
   <property name="service.type" value="MultiProtocolGateway"/>
  <property name="import.file" value="D:\sample_mpg\sample_mpg.zip"/>
   <property name="deployment.policy.object" value="DCM_Demo"/>
		  <property name="host" value="172.17.11.158"/>
		 <property name="uid" value="pavan"/>
		 <property name="pwd" value="Welcome@123"/>
		 <property name="domain" value="Miracle_DCM"/>
 
  
  <!-- Ensure we know where DCM is located. -->
  <fail message="Please define the ANT property 'dcm.dir', which points to the directory where DCM is installed." unless="dcm.dir"/>
  <available filepath="${dcm.dir}" file="dist/dcm.${dcm.build.version}.jar" property="dcm.dir.good"/>
  <fail message="The Ant property 'dcm.dir' doesn't seem to point to DCM since ${dcm.dir}/dist/dcm.${dcm.build.version}.jar is not found." unless="dcm.dir.good"/>
  
  <!-- Provide reasonable defaults for some optional properties. -->
  <property name="dcm.jar" location="${dcm.dir}/dist/dcm.${dcm.build.version}.jar"/>
  <property name="work.dir" location="D:\ANT\datapower-configuration-manager-master\dcm\tmp"/>
  <property name="schema.dir" location="${dcm.dir}/schemas"/>
  <property name="capturesoma" value=""/>
  <property name="dumpinput" value="false"/>
  <property name="dumpoutput" value="false"/>
  
  
  <!--
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      Provide necessary definitions
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  -->

  <!-- Definitions related to the DCM jar file. -->
  <!--
    (This block, along with the xmlns:props="antlib:ibm" above, allows the use of
     nested Ant properties, which is sometimes useful.  For example, suppose the ant property
     "environment" is defined as "SIT" and the ant property "xyz" is defined as "somedirectory_${environment}".
     This <propertyhelper> definition means that ${xyz} correctly turns into "somedirectory_SIT".)
  -->
  <typedef uri="antlib:ibm" resource="com/ibm/antlib.xml" classpath="${dcm.jar}"/>
  <propertyhelper>
    <props:nested/>
  </propertyhelper>

  <include file="${dcm.dir}/src/dcm-taskdefs.ant.xml"/> <!-- pull in standard dcm taskdefs/macrodefs such as <createDomain> -->

  <!--
    Backup all the domains on the device.  Note that this is not a secure backup that includes
    key and certificate files.
  -->
  
  
  
  <!--
    Backup specific domains on the device.
  -->
  <target name="check-access" depends="-check-std-args">
    
    <!-- 
      Check whether we have access to the device by fetching the firmware version.  Throws an exception, terminating Ant,
      in case of an error.  Also, detects that firmware.version is already set and does nothing in that case.
      In case of an error it throws an exception or prints the SOAP response and terminates Ant.
    -->
    <checkDeviceAccess host="${host}" port="${port}" uid="${uid}" pwd="${pwd}" versionprop="firmware.version" domain="${domain}" dumpinput="${dumpinput}" dumpoutput="${dumpoutput}" capturesoma="${capturesoma}"/>
    <if>
      <or>
        <not>
          <isset property="firmware.version"/>
        </not>
        <equals arg1="${firmware.version}" arg2=""/>
      </or>
      <then>
        <fail message="Unable to reach ${host} or the userid/password doesn't work."/>
      </then>
    </if>
  </target>
  
  <!-- All ANT scripts support this by convention. -->
  <target name="clean">
    <delete dir="${work.dir}"/>
  </target>
  
  <target name="import-changed" depends="import-from-def"/>
  
  
  <target name="import-from-def" depends="-init-dir, check-access">
    
    <fail message="The Ant property 'domain' is required but not defined.  This is the name of a domain on the DataPower device." unless="domain"/>
    <fail message="The Ant property 'import.file' is required but not defined.  This is the .zip or .xcfg file to import into the domain." unless="import.file"/>
    <if>
      <not>
        <available file="${import.file}"/>
      </not>
      <then>
        <fail message="Unable to see the import file : ${import.file}"/>
      </then>
    </if>
    
    <sequential>
      <local name="dcmdefinition"/>
      <local name="tmp"/>
      <local name="tmp2"/>
      
      <!-- Load and preprocess the set of deployment policies, or substitute an empty set. -->
      <property name="import.changes.file" location="${dcm.dir}/src/no-changes.dcm.xml"/> <!-- provide a default, if property not defined. -->
      <loadfile srcfile="${import.changes.file}" property="tmp">
        <filterchain>
          <expandproperties/>
        </filterchain>
      </loadfile>
      <nxslt inprop="tmp" outprop="tmp2" xsl="${dcm.dir}/src/remove-unwanted-elements.xsl">
        <param ant="environment" xsl="param1"/>
        <param ant="device" xsl="param2"/>
      </nxslt>
      <nxslt inprop="tmp2" outprop="dcmdefinition" xsl="${dcm.dir}/src/expand-black-white-modify.xsl"/>
      
      <!-- <echo>dcmdefinition = ${dcmdefinition}</echo> -->
      
      <!--
        Import a plain .zip or .xcfg file into the domain, making no changes to the import objects or files.
        In case of an error it throws an exception or prints the SOAP response and terminates Ant.
      -->
      <importConfig host="${host}" port="${port}" uid="${uid}" pwd="${pwd}" domain="${domain}"
        inputfile="${import.file}"
        dcmdir="${dcm.dir}" workdir="${work.dir}" changes="${dcmdefinition}" dumpinput="${dumpinput}" dumpoutput="${dumpoutput}" capturesoma="${capturesoma}"/>
    
    </sequential>
    
  </target>
  
  
  <target name="import-dpo" depends="-init-dir, check-access">
    
    <fail message="The Ant property 'domain' is required but not defined.  This is the name of a domain on the DataPower device." unless="domain"/>
    <fail message="The Ant property 'import.file' is required but not defined.  This is the .zip or .xcfg file to import into the domain." unless="import.file"/>
    <fail message="The Ant property 'deployment.policy.object' is required but not defined.  This name of a deployment policy object to apply during the import." unless="deployment.policy.object"/>
    <if>
      <not>
        <available file="${import.file}"/>
      </not>
      <then>
        <fail message="Unable to see the import file : ${import.file}"/>
      </then>
    </if>
    
    <sequential>
      
      <!--
        Import a plain .zip or .xcfg file into the domain, making no changes to the import objects or files.
        In case of an error it throws an exception or prints the SOAP response and terminates Ant.
      -->
      <importConfigDPO host="${host}" port="${port}" uid="${uid}" pwd="${pwd}" domain="${domain}"
        inputfile="${import.file}" dpo="${deployment.policy.object}"
        dcmdir="${dcm.dir}" workdir="${work.dir}" dumpinput="${dumpinput}" dumpoutput="${dumpoutput}" capturesoma="${capturesoma}"/>
      
    </sequential>
    
  </target>
  <target name="-check-std-args">
    
    <fail message="The Ant property 'host' is required but not defined.  This is the hostname or IP address of a DataPower device." unless="host"/>
    <fail message="The Ant property 'uid' is required but not defined.  This is the userid on the DataPower device." unless="uid"/>
    
    <if>
      <not>
        <isset property="pwd"/>
      </not>
      <then>
        <input message="What is the password for '${uid}' on ${host}? " addproperty="pwd">
          <handler type="secure"/>
        </input>
      </then>
    </if>
    
    <property name="port" value="5550"/> <!-- Provide a default when this property hasn't been defined before. -->
    
  </target>
  <target name="-init-dir" depends="clean">
    <mkdir dir="${work.dir}"/>
    <mkdir dir="${schema.dir}"/>
  </target>
  
</project>
